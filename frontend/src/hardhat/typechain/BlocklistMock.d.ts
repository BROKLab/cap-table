/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BlocklistMockInterface extends ethers.utils.Interface {
  functions: {
    "addBlocklisted(address,address)": FunctionFragment;
    "mockFunction(address,bool)": FunctionFragment;
    "removeBlocklisted(address,address)": FunctionFragment;
    "isBlocklistAdmin(address,address)": FunctionFragment;
    "isBlocklisted(address,address)": FunctionFragment;
    "addBlocklistAdmin(address,address)": FunctionFragment;
    "renounceBlocklistAdmin(address)": FunctionFragment;
    "removeBlocklistAdmin(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBlocklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunction",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklistAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlocklistAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceBlocklistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklistAdmin",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklistAdmin",
    data: BytesLike
  ): Result;

  events: {
    "BlocklistedAdded(address,address)": EventFragment;
    "BlocklistedRemoved(address,address)": EventFragment;
    "BlocklistAdminAdded(address,address)": EventFragment;
    "BlocklistAdminRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlocklistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistedRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistAdminRemoved"): EventFragment;
}

export class BlocklistMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BlocklistMockInterface;

  functions: {
    addBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceBlocklistAdmin(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addBlocklisted(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addBlocklisted(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockFunction(
    token: string,
    mockActivated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockFunction(address,bool)"(
    token: string,
    mockActivated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeBlocklisted(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeBlocklisted(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isBlocklistAdmin(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBlocklistAdmin(address,address)"(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBlocklisted(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBlocklisted(address,address)"(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addBlocklistAdmin(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addBlocklistAdmin(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceBlocklistAdmin(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceBlocklistAdmin(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeBlocklistAdmin(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeBlocklistAdmin(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceBlocklistAdmin(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BlocklistedAdded(token: string | null, account: string | null): EventFilter;

    BlocklistedRemoved(
      token: string | null,
      account: string | null
    ): EventFilter;

    BlocklistAdminAdded(
      token: string | null,
      account: string | null
    ): EventFilter;

    BlocklistAdminRemoved(
      token: string | null,
      account: string | null
    ): EventFilter;
  };

  estimateGas: {
    addBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceBlocklistAdmin(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeBlocklisted(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isBlocklistAdmin(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlocklisted(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBlocklisted(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceBlocklistAdmin(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceBlocklistAdmin(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeBlocklistAdmin(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeBlocklistAdmin(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
