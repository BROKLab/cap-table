/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CapTableQueInterface extends ethers.utils.Interface {
  functions: {
    "add(address,bytes32)": FunctionFragment;
    "controllers()": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getStatus(address)": FunctionFragment;
    "info(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "list()": FunctionFragment;
    "listApproved()": FunctionFragment;
    "listDeclined()": FunctionFragment;
    "listQued()": FunctionFragment;
    "process(address,bool,bytes32)": FunctionFragment;
    "setControllers(address[])": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values: [string]): string;
  encodeFunctionData(functionFragment: "info", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listDeclined",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "listQued", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [string, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllers",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listDeclined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listQued", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;

  events: {
    "qued(address)": EventFragment;
    "statusUpdate(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "qued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "statusUpdate"): EventFragment;
}

export class CapTableQue extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CapTableQueInterface;

  functions: {
    add(
      adr: string,
      uuid: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(address,bytes32)"(
      adr: string,
      uuid: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    controllers(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "controllers()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getRegistry(
      overrides?: CallOverrides
    ): Promise<{
      capTableRegistry: string;
      0: string;
    }>;

    "getRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      capTableRegistry: string;
      0: string;
    }>;

    getStatus(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getStatus(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    info(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      status: BigNumber;
      uuid: string;
      0: BigNumber;
      1: string;
    }>;

    "info(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      status: BigNumber;
      uuid: string;
      0: BigNumber;
      1: string;
    }>;

    isController(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isController(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    list(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    "list()"(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    listApproved(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    "listApproved()"(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    listDeclined(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    "listDeclined()"(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    listQued(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    "listQued()"(
      overrides?: CallOverrides
    ): Promise<{
      capTableList: string[];
      0: string[];
    }>;

    process(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "process(address,bool,bytes32)"(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setControllers(
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistry(
      adr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistry(address)"(
      adr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    adr: string,
    uuid: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(address,bytes32)"(
    adr: string,
    uuid: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  controllers(overrides?: CallOverrides): Promise<string[]>;

  "controllers()"(overrides?: CallOverrides): Promise<string[]>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  "getRegistry()"(overrides?: CallOverrides): Promise<string>;

  getStatus(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getStatus(address)"(
    adr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  info(
    adr: string,
    overrides?: CallOverrides
  ): Promise<{
    status: BigNumber;
    uuid: string;
    0: BigNumber;
    1: string;
  }>;

  "info(address)"(
    adr: string,
    overrides?: CallOverrides
  ): Promise<{
    status: BigNumber;
    uuid: string;
    0: BigNumber;
    1: string;
  }>;

  isController(adr: string, overrides?: CallOverrides): Promise<boolean>;

  "isController(address)"(
    adr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(overrides?: CallOverrides): Promise<string[]>;

  "list()"(overrides?: CallOverrides): Promise<string[]>;

  listApproved(overrides?: CallOverrides): Promise<string[]>;

  "listApproved()"(overrides?: CallOverrides): Promise<string[]>;

  listDeclined(overrides?: CallOverrides): Promise<string[]>;

  "listDeclined()"(overrides?: CallOverrides): Promise<string[]>;

  listQued(overrides?: CallOverrides): Promise<string[]>;

  "listQued()"(overrides?: CallOverrides): Promise<string[]>;

  process(
    adr: string,
    approved: boolean,
    reason: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "process(address,bool,bytes32)"(
    adr: string,
    approved: boolean,
    reason: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setControllers(
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setControllers(address[])"(
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistry(adr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setRegistry(address)"(
    adr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(adr: string, uuid: BytesLike, overrides?: CallOverrides): Promise<void>;

    "add(address,bytes32)"(
      adr: string,
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    controllers(overrides?: CallOverrides): Promise<string[]>;

    "controllers()"(overrides?: CallOverrides): Promise<string[]>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    "getRegistry()"(overrides?: CallOverrides): Promise<string>;

    getStatus(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      status: BigNumber;
      uuid: string;
      0: BigNumber;
      1: string;
    }>;

    "info(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      status: BigNumber;
      uuid: string;
      0: BigNumber;
      1: string;
    }>;

    isController(adr: string, overrides?: CallOverrides): Promise<boolean>;

    "isController(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(overrides?: CallOverrides): Promise<string[]>;

    "list()"(overrides?: CallOverrides): Promise<string[]>;

    listApproved(overrides?: CallOverrides): Promise<string[]>;

    "listApproved()"(overrides?: CallOverrides): Promise<string[]>;

    listDeclined(overrides?: CallOverrides): Promise<string[]>;

    "listDeclined()"(overrides?: CallOverrides): Promise<string[]>;

    listQued(overrides?: CallOverrides): Promise<string[]>;

    "listQued()"(overrides?: CallOverrides): Promise<string[]>;

    process(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "process(address,bool,bytes32)"(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setControllers(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(adr: string, overrides?: CallOverrides): Promise<void>;

    "setRegistry(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    qued(capTable: string | null): EventFilter;

    statusUpdate(
      capTable: string | null,
      status: null,
      reason: null
    ): EventFilter;
  };

  estimateGas: {
    add(
      adr: string,
      uuid: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(address,bytes32)"(
      adr: string,
      uuid: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    controllers(overrides?: CallOverrides): Promise<BigNumber>;

    "controllers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStatus(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "info(address)"(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isController(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isController(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(overrides?: CallOverrides): Promise<BigNumber>;

    "list()"(overrides?: CallOverrides): Promise<BigNumber>;

    listApproved(overrides?: CallOverrides): Promise<BigNumber>;

    "listApproved()"(overrides?: CallOverrides): Promise<BigNumber>;

    listDeclined(overrides?: CallOverrides): Promise<BigNumber>;

    "listDeclined()"(overrides?: CallOverrides): Promise<BigNumber>;

    listQued(overrides?: CallOverrides): Promise<BigNumber>;

    "listQued()"(overrides?: CallOverrides): Promise<BigNumber>;

    process(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "process(address,bool,bytes32)"(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setControllers(
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistry(adr: string, overrides?: Overrides): Promise<BigNumber>;

    "setRegistry(address)"(
      adr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      adr: string,
      uuid: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(address,bytes32)"(
      adr: string,
      uuid: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    controllers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controllers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStatus(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStatus(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(adr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "info(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isController(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "list()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listApproved()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listDeclined(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listDeclined()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listQued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listQued()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    process(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "process(address,bool,bytes32)"(
      adr: string,
      approved: boolean,
      reason: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setControllers(
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistry(
      adr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistry(address)"(
      adr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
