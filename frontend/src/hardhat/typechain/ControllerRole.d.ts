/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ControllerRoleInterface extends ethers.utils.Interface {
  functions: {
    "isController()": FunctionFragment;
    "addController(address)": FunctionFragment;
    "removeController(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeController",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeController",
    data: BytesLike
  ): Result;

  events: {
    "controllerAdded(address)": EventFragment;
    "controllerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "controllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "controllerRemoved"): EventFragment;
}

export class ControllerRole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ControllerRoleInterface;

  functions: {
    isController(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isController()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    addController(
      newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addController(address)"(
      newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeController(
      controllerToRemove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeController(address)"(
      controllerToRemove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isController(overrides?: CallOverrides): Promise<boolean>;

  "isController()"(overrides?: CallOverrides): Promise<boolean>;

  addController(
    newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addController(address)"(
    newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeController(
    controllerToRemove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeController(address)"(
    controllerToRemove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isController(overrides?: CallOverrides): Promise<boolean>;

    "isController()"(overrides?: CallOverrides): Promise<boolean>;

    addController(
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addController(address)"(
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeController(
      controllerToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeController(address)"(
      controllerToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    controllerAdded(account: string | null): EventFilter;

    controllerRemoved(account: string | null): EventFilter;
  };

  estimateGas: {
    isController(overrides?: CallOverrides): Promise<BigNumber>;

    "isController()"(overrides?: CallOverrides): Promise<BigNumber>;

    addController(
      newController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addController(address)"(
      newController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeController(
      controllerToRemove: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeController(address)"(
      controllerToRemove: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isController()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addController(
      newController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addController(address)"(
      newController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeController(
      controllerToRemove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeController(address)"(
      controllerToRemove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
