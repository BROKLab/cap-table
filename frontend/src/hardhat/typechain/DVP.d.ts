/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DVPInterface extends ethers.utils.Interface {
  functions: {
    "priceOracles(address)": FunctionFragment;
    "setPriceOracles(address,address[])": FunctionFragment;
    "executeTrade(uint256)": FunctionFragment;
    "cancelTrade(uint256)": FunctionFragment;
    "setPriceOwnership(address,address,bool)": FunctionFragment;
    "getPriceOwnership(address,address)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "getTrade(uint256)": FunctionFragment;
    "variablePriceStartDate(address)": FunctionFragment;
    "getTradeAcceptanceStatus(uint256)": FunctionFragment;
    "requestTrade(address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8)": FunctionFragment;
    "tradeExecuters()": FunctionFragment;
    "setTokenPrice(address,address,bytes32,bytes32,uint256)": FunctionFragment;
    "forceTrade(uint256)": FunctionFragment;
    "approveTrade(uint256,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenControllers(address)": FunctionFragment;
    "getTokenPrice(address,address,bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "getTradeApprovalStatus(uint256)": FunctionFragment;
    "setTradeExecuters(address[])": FunctionFragment;
    "setVariablePriceStartDate(address,uint256)": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "getNbTrades()": FunctionFragment;
    "setTokenControllers(address,address[])": FunctionFragment;
    "acceptTrade(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "priceOracles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracles",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOwnership",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "variablePriceStartDate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeAcceptanceStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTrade",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeExecuters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [string, string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTrade",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenControllers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTradeApprovalStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeExecuters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariablePriceStartDate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenControllers",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      BytesLike,
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceive",
    values: [
      BytesLike,
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "priceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "variablePriceStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeAcceptanceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeExecuters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeApprovalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeExecuters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariablePriceStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNbTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canReceive", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DVP extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DVPInterface;

  functions: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceOwnership(address,address,bool)"(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getPriceOwnership(address,address)"(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getTrade(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: number;
      7: number;
    }>;

    "getTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: number;
      7: number;
    }>;

    variablePriceStartDate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "variablePriceStartDate(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTradeAcceptanceStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getTradeAcceptanceStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestTrade(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestTrade(address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8)"(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    tradeExecuters(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "tradeExecuters()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    setTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenPrice(address,address,bytes32,bytes32,uint256)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveTrade(
      index: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveTrade(uint256,bool)"(
      index: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTokenPrice(address,address,bytes32,bytes32)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getTradeApprovalStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getTradeApprovalStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setTradeExecuters(
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTradeExecuters(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVariablePriceStartDate(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVariablePriceStartDate(address,uint256)"(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPrice(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPrice(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getNbTrades(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNbTrades()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    acceptTrade(
      index: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "acceptTrade(uint256)"(
      index: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  priceOracles(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "priceOracles(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  setPriceOracles(
    tokenAddress: string,
    oracles: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceOracles(address,address[])"(
    tokenAddress: string,
    oracles: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeTrade(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeTrade(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelTrade(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelTrade(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceOwnership(
    tokenAddress1: string,
    tokenAddress2: string,
    priceOwnership: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceOwnership(address,address,bool)"(
    tokenAddress1: string,
    tokenAddress2: string,
    priceOwnership: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPriceOwnership(
    tokenAddress1: string,
    tokenAddress2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getPriceOwnership(address,address)"(
    tokenAddress1: string,
    tokenAddress2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "canImplementInterfaceForAddress(bytes32,address)"(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrade(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
    6: number;
    7: number;
  }>;

  "getTrade(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
    6: number;
    7: number;
  }>;

  variablePriceStartDate(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "variablePriceStartDate(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeAcceptanceStatus(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getTradeAcceptanceStatus(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestTrade(
    holder1: string,
    holder2: string,
    executer: string,
    expirationDate: BigNumberish,
    tokenAddress1: string,
    tokenValue1: BigNumberish,
    tokenId1: BytesLike,
    tokenStandard1: BigNumberish,
    tokenAddress2: string,
    tokenValue2: BigNumberish,
    tokenId2: BytesLike,
    tokenStandard2: BigNumberish,
    tradeType: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestTrade(address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8)"(
    holder1: string,
    holder2: string,
    executer: string,
    expirationDate: BigNumberish,
    tokenAddress1: string,
    tokenValue1: BigNumberish,
    tokenId1: BytesLike,
    tokenStandard1: BigNumberish,
    tokenAddress2: string,
    tokenValue2: BigNumberish,
    tokenId2: BytesLike,
    tokenStandard2: BigNumberish,
    tradeType: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  tradeExecuters(overrides?: CallOverrides): Promise<string[]>;

  "tradeExecuters()"(overrides?: CallOverrides): Promise<string[]>;

  setTokenPrice(
    tokenAddress1: string,
    tokenAddress2: string,
    tokenId1: BytesLike,
    tokenId2: BytesLike,
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenPrice(address,address,bytes32,bytes32,uint256)"(
    tokenAddress1: string,
    tokenAddress2: string,
    tokenId1: BytesLike,
    tokenId2: BytesLike,
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceTrade(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceTrade(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveTrade(
    index: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveTrade(uint256,bool)"(
    index: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  tokenControllers(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "tokenControllers(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokenPrice(
    tokenAddress1: string,
    tokenAddress2: string,
    tokenId1: BytesLike,
    tokenId2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenPrice(address,address,bytes32,bytes32)"(
    tokenAddress1: string,
    tokenAddress2: string,
    tokenId1: BytesLike,
    tokenId2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  getTradeApprovalStatus(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getTradeApprovalStatus(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setTradeExecuters(
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTradeExecuters(address[])"(
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVariablePriceStartDate(
    tokenAddress: string,
    startDate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVariablePriceStartDate(address,uint256)"(
    tokenAddress: string,
    startDate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPrice(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getPrice(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNbTrades(overrides?: CallOverrides): Promise<BigNumber>;

  "getNbTrades()"(overrides?: CallOverrides): Promise<BigNumber>;

  setTokenControllers(
    tokenAddress: string,
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenControllers(address,address[])"(
    tokenAddress: string,
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  acceptTrade(
    index: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "acceptTrade(uint256)"(
    index: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokensReceived(
    arg0: BytesLike,
    partition: BytesLike,
    arg2: string,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
    arg0: BytesLike,
    partition: BytesLike,
    arg2: string,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canReceive(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: string,
    arg4: string,
    arg5: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: string,
    arg4: string,
    arg5: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeTrade(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "executeTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTrade(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceOwnership(address,address,bool)"(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getPriceOwnership(address,address)"(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrade(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: number;
      7: number;
    }>;

    "getTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
      6: number;
      7: number;
    }>;

    variablePriceStartDate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "variablePriceStartDate(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeAcceptanceStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getTradeAcceptanceStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestTrade(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestTrade(address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8)"(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeExecuters(overrides?: CallOverrides): Promise<string[]>;

    "tradeExecuters()"(overrides?: CallOverrides): Promise<string[]>;

    setTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenPrice(address,address,bytes32,bytes32,uint256)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceTrade(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "forceTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTrade(
      index: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveTrade(uint256,bool)"(
      index: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenPrice(address,address,bytes32,bytes32)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    getTradeApprovalStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getTradeApprovalStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setTradeExecuters(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTradeExecuters(address[])"(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVariablePriceStartDate(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVariablePriceStartDate(address,uint256)"(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPrice(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbTrades(overrides?: CallOverrides): Promise<BigNumber>;

    "getNbTrades()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptTrade(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "acceptTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelTrade(index: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancelTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceOwnership(address,address,bool)"(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceOwnership(address,address)"(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrade(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    variablePriceStartDate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "variablePriceStartDate(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeAcceptanceStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTradeAcceptanceStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestTrade(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestTrade(address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8)"(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    tradeExecuters(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeExecuters()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenPrice(address,address,bytes32,bytes32,uint256)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceTrade(index: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "forceTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveTrade(
      index: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveTrade(uint256,bool)"(
      index: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenPrice(address,address,bytes32,bytes32)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeApprovalStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTradeApprovalStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTradeExecuters(
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTradeExecuters(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVariablePriceStartDate(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVariablePriceStartDate(address,uint256)"(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPrice(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbTrades(overrides?: CallOverrides): Promise<BigNumber>;

    "getNbTrades()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    acceptTrade(
      index: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "acceptTrade(uint256)"(
      index: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceOwnership(address,address,bool)"(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOwnership(address,address)"(
      tokenAddress1: string,
      tokenAddress2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrade(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTrade(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    variablePriceStartDate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "variablePriceStartDate(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeAcceptanceStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradeAcceptanceStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestTrade(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestTrade(address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8)"(
      holder1: string,
      holder2: string,
      executer: string,
      expirationDate: BigNumberish,
      tokenAddress1: string,
      tokenValue1: BigNumberish,
      tokenId1: BytesLike,
      tokenStandard1: BigNumberish,
      tokenAddress2: string,
      tokenValue2: BigNumberish,
      tokenId2: BytesLike,
      tokenStandard2: BigNumberish,
      tradeType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    tradeExecuters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tradeExecuters()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenPrice(address,address,bytes32,bytes32,uint256)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceTrade(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceTrade(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveTrade(
      index: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveTrade(uint256,bool)"(
      index: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenPrice(address,address,bytes32,bytes32)"(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradeApprovalStatus(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradeApprovalStatus(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTradeExecuters(
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTradeExecuters(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVariablePriceStartDate(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVariablePriceStartDate(address,uint256)"(
      tokenAddress: string,
      startDate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNbTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNbTrades()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    acceptTrade(
      index: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "acceptTrade(uint256)"(
      index: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
