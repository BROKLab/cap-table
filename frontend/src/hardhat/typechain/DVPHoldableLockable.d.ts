/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DVPHoldableLockableInterface extends ethers.utils.Interface {
  functions: {
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHolds",
    values: [
      string,
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHolds",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteHolds(address,bytes32,address,bytes32,bytes32,address,address)": EventFragment;
    "ExecutedHold(bytes32,bytes32)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
    "CreateNote(address,bytes32,bytes)": EventFragment;
    "DestroyNote(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteHolds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestroyNote"): EventFragment;
}

export class DVPHoldableLockable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DVPHoldableLockableInterface;

  functions: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32,address,address)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      token1Recipient: string,
      token2Recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "canImplementInterfaceForAddress(bytes32,address)"(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32)"(
    token1: string,
    token1HoldId: BytesLike,
    tokenStandard1: BigNumberish,
    token2: string,
    token2HoldId: BytesLike,
    tokenStandard2: BigNumberish,
    preimage: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32,address,address)"(
    token1: string,
    token1HoldId: BytesLike,
    tokenStandard1: BigNumberish,
    token2: string,
    token2HoldId: BytesLike,
    tokenStandard2: BigNumberish,
    preimage: BytesLike,
    token1Recipient: string,
    token2Recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32,address,address)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      token1Recipient: string,
      token2Recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ExecuteHolds(
      token1: string | null,
      token1HoldId: null,
      token2: string | null,
      token2HoldId: null,
      preimage: null,
      token1Recipient: null,
      token2Recipient: null
    ): EventFilter;

    ExecutedHold(holdId: BytesLike | null, lockPreimage: null): EventFilter;

    Transfer(from: string | null, to: string | null, tokens: null): EventFilter;

    TransferByPartition(
      fromPartition: BytesLike | null,
      operator: null,
      from: string | null,
      to: string | null,
      value: null,
      data: null,
      operatorData: null
    ): EventFilter;

    CreateNote(
      owner: string | null,
      noteHash: BytesLike | null,
      metadata: null
    ): EventFilter;

    DestroyNote(owner: string | null, noteHash: BytesLike | null): EventFilter;
  };

  estimateGas: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32,address,address)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      token1Recipient: string,
      token2Recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeHolds(address,bytes32,uint8,address,bytes32,uint8,bytes32,address,address)"(
      token1: string,
      token1HoldId: BytesLike,
      tokenStandard1: BigNumberish,
      token2: string,
      token2HoldId: BytesLike,
      tokenStandard2: BigNumberish,
      preimage: BytesLike,
      token1Recipient: string,
      token2Recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
