/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC1400HoldableCertificateTokenInterface
  extends ethers.utils.Interface {
  functions: {
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "approveByPartition(bytes32,address,uint256)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "setPartitionControllers(bytes32,address[])": FunctionFragment;
    "allowanceByPartition(bytes32,address,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "transferWithData(address,uint256,bytes)": FunctionFragment;
    "isIssuable()": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "isControllable()": FunctionFragment;
    "granularity()": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "issueByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "totalPartitions()": FunctionFragment;
    "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "renounceIssuance()": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "controllers()": FunctionFragment;
    "controllersByPartition(bytes32)": FunctionFragment;
    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "canTransferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "migrate(address,bool)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "redeemFrom(address,uint256,bytes)": FunctionFragment;
    "addMinter(address)": FunctionFragment;
    "renounceMinter()": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "totalSupplyByPartition(bytes32)": FunctionFragment;
    "setTokenExtension(address,string,bool,bool,bool)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "getDocument(bytes32)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "issue(address,uint256,bytes)": FunctionFragment;
    "getDefaultPartitions()": FunctionFragment;
    "renounceControl()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "redeem(uint256,bytes)": FunctionFragment;
    "setControllers(address[])": FunctionFragment;
    "setDefaultPartitions(bytes32[])": FunctionFragment;
    "transferFromWithData(address,address,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveByPartition",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartitionControllers",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceByPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPartitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canOperatorTransferByPartition",
    values: [BytesLike, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceIssuance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllersByPartition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [BytesLike, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canTransferByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "addMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyByPartition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenExtension",
    values: [string, string, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultPartitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPartitions",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartitionControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowanceByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canOperatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllersByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalByPartition(bytes32,address,address,uint256)": EventFragment;
    "MinterAdded(address)": EventFragment;
    "MinterRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Document(bytes32,string,bytes32)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
    "ChangedPartition(bytes32,bytes32,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "Issued(address,address,uint256,bytes)": EventFragment;
    "Redeemed(address,address,uint256,bytes)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Document"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export class ERC1400HoldableCertificateToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC1400HoldableCertificateTokenInterface;

  functions: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveByPartition(bytes32,address,uint256)"(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPartitionControllers(bytes32,address[])"(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowanceByPartition(bytes32,address,address)"(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isIssuable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isIssuable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    removeMinter(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    isControllable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isControllable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    granularity(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "granularity()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalPartitions(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "totalPartitions()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    renounceIssuance(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceIssuance()"(overrides?: Overrides): Promise<ContractTransaction>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    controllers(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "controllers()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "controllersByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    "canTransferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrate(address,bool)"(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemFrom(address,uint256,bytes)"(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMinter(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceMinter(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceMinter()"(overrides?: Overrides): Promise<ContractTransaction>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenExtension(address,string,bool,bool,bool)"(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDefaultPartitions(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getDefaultPartitions()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    renounceControl(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceControl()"(overrides?: Overrides): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setControllers(
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDefaultPartitions(bytes32[])"(
      partitions: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  setDocument(
    name: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDocument(bytes32,string,bytes32)"(
    name: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorizeOperatorByPartition(bytes32,address)"(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveByPartition(
    partition: BytesLike,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveByPartition(bytes32,address,uint256)"(
    partition: BytesLike,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeOperatorByPartition(bytes32,address)"(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPartitionControllers(
    partition: BytesLike,
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPartitionControllers(bytes32,address[])"(
    partition: BytesLike,
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowanceByPartition(
    partition: BytesLike,
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowanceByPartition(bytes32,address,address)"(
    partition: BytesLike,
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "canImplementInterfaceForAddress(bytes32,address)"(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transferWithData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferWithData(address,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isIssuable(overrides?: CallOverrides): Promise<boolean>;

  "isIssuable()"(overrides?: CallOverrides): Promise<boolean>;

  removeMinter(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinter(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOfByPartition(
    partition: BytesLike,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfByPartition(bytes32,address)"(
    partition: BytesLike,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  isControllable(overrides?: CallOverrides): Promise<boolean>;

  "isControllable()"(overrides?: CallOverrides): Promise<boolean>;

  granularity(overrides?: CallOverrides): Promise<BigNumber>;

  "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeemByPartition(
    partition: BytesLike,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemByPartition(bytes32,uint256,bytes)"(
    partition: BytesLike,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  issueByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issueByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalPartitions(overrides?: CallOverrides): Promise<string[]>;

  "totalPartitions()"(overrides?: CallOverrides): Promise<string[]>;

  canOperatorTransferByPartition(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
  }>;

  "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
  }>;

  renounceIssuance(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceIssuance()"(overrides?: Overrides): Promise<ContractTransaction>;

  isOperatorForPartition(
    partition: BytesLike,
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperatorForPartition(bytes32,address,address)"(
    partition: BytesLike,
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  partitionsOf(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "partitionsOf(address)"(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  controllers(overrides?: CallOverrides): Promise<string[]>;

  "controllers()"(overrides?: CallOverrides): Promise<string[]>;

  controllersByPartition(
    partition: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "controllersByPartition(bytes32)"(
    partition: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  operatorTransferByPartition(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  canTransferByPartition(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
  }>;

  "canTransferByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
  }>;

  migrate(
    newContractAddress: string,
    definitive: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrate(address,bool)"(
    newContractAddress: string,
    definitive: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorizeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  redeemFrom(
    from: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemFrom(address,uint256,bytes)"(
    from: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMinter(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMinter(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceMinter(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceMinter()"(overrides?: Overrides): Promise<ContractTransaction>;

  operatorRedeemByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupplyByPartition(
    partition: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyByPartition(bytes32)"(
    partition: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setTokenExtension(
    extension: string,
    interfaceLabel: string,
    removeOldExtensionRoles: boolean,
    addMinterRoleForExtension: boolean,
    addControllerRoleForExtension: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenExtension(address,string,bool,bool,bool)"(
    extension: string,
    interfaceLabel: string,
    removeOldExtensionRoles: boolean,
    addMinterRoleForExtension: boolean,
    addControllerRoleForExtension: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isMinter(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDocument(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  "getDocument(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  isOperator(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperator(address,address)"(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issue(address,uint256,bytes)"(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDefaultPartitions(overrides?: CallOverrides): Promise<string[]>;

  "getDefaultPartitions()"(overrides?: CallOverrides): Promise<string[]>;

  renounceControl(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceControl()"(overrides?: Overrides): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256,bytes)"(
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setControllers(
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setControllers(address[])"(
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDefaultPartitions(
    partitions: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDefaultPartitions(bytes32[])"(
    partitions: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFromWithData(
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFromWithData(address,address,uint256,bytes)"(
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferByPartition(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approveByPartition(bytes32,address,uint256)"(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPartitionControllers(bytes32,address[])"(
      partition: BytesLike,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowanceByPartition(bytes32,address,address)"(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isIssuable(overrides?: CallOverrides): Promise<boolean>;

    "isIssuable()"(overrides?: CallOverrides): Promise<boolean>;

    removeMinter(account: string, overrides?: CallOverrides): Promise<void>;

    "removeMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    isControllable(overrides?: CallOverrides): Promise<boolean>;

    "isControllable()"(overrides?: CallOverrides): Promise<boolean>;

    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPartitions(overrides?: CallOverrides): Promise<string[]>;

    "totalPartitions()"(overrides?: CallOverrides): Promise<string[]>;

    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    renounceIssuance(overrides?: CallOverrides): Promise<void>;

    "renounceIssuance()"(overrides?: CallOverrides): Promise<void>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    controllers(overrides?: CallOverrides): Promise<string[]>;

    "controllers()"(overrides?: CallOverrides): Promise<string[]>;

    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "controllersByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    "canTransferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
    }>;

    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrate(address,bool)"(
      newContractAddress: string,
      definitive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemFrom(address,uint256,bytes)"(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinter(account: string, overrides?: CallOverrides): Promise<void>;

    "addMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMinter(overrides?: CallOverrides): Promise<void>;

    "renounceMinter()"(overrides?: CallOverrides): Promise<void>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenExtension(address,string,bool,bool,bool)"(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getDefaultPartitions(overrides?: CallOverrides): Promise<string[]>;

    "getDefaultPartitions()"(overrides?: CallOverrides): Promise<string[]>;

    renounceControl(overrides?: CallOverrides): Promise<void>;

    "renounceControl()"(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setControllers(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setDefaultPartitions(bytes32[])"(
      partitions: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovalByPartition(
      partition: BytesLike | null,
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    MinterAdded(account: string | null): EventFilter;

    MinterRemoved(account: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Document(
      name: BytesLike | null,
      uri: null,
      documentHash: null
    ): EventFilter;

    TransferByPartition(
      fromPartition: BytesLike | null,
      operator: null,
      from: string | null,
      to: string | null,
      value: null,
      data: null,
      operatorData: null
    ): EventFilter;

    ChangedPartition(
      fromPartition: BytesLike | null,
      toPartition: BytesLike | null,
      value: null
    ): EventFilter;

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    AuthorizedOperatorByPartition(
      partition: BytesLike | null,
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    RevokedOperatorByPartition(
      partition: BytesLike | null,
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Issued(
      operator: string | null,
      to: string | null,
      value: null,
      data: null
    ): EventFilter;

    Redeemed(
      operator: string | null,
      from: string | null,
      value: null,
      data: null
    ): EventFilter;

    IssuedByPartition(
      partition: BytesLike | null,
      operator: string | null,
      to: string | null,
      value: null,
      data: null,
      operatorData: null
    ): EventFilter;

    RedeemedByPartition(
      partition: BytesLike | null,
      operator: string | null,
      from: string | null,
      value: null,
      operatorData: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;
  };

  estimateGas: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveByPartition(bytes32,address,uint256)"(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPartitionControllers(bytes32,address[])"(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowanceByPartition(bytes32,address,address)"(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isIssuable(overrides?: CallOverrides): Promise<BigNumber>;

    "isIssuable()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeMinter(account: string, overrides?: Overrides): Promise<BigNumber>;

    "removeMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<BigNumber>;

    "isControllable()"(overrides?: CallOverrides): Promise<BigNumber>;

    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalPartitions(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPartitions()"(overrides?: CallOverrides): Promise<BigNumber>;

    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceIssuance(overrides?: Overrides): Promise<BigNumber>;

    "renounceIssuance()"(overrides?: Overrides): Promise<BigNumber>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllers(overrides?: CallOverrides): Promise<BigNumber>;

    "controllers()"(overrides?: CallOverrides): Promise<BigNumber>;

    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "controllersByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canTransferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrate(address,bool)"(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemFrom(address,uint256,bytes)"(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMinter(account: string, overrides?: Overrides): Promise<BigNumber>;

    "addMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceMinter(overrides?: Overrides): Promise<BigNumber>;

    "renounceMinter()"(overrides?: Overrides): Promise<BigNumber>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenExtension(address,string,bool,bool,bool)"(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocument(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDefaultPartitions(overrides?: CallOverrides): Promise<BigNumber>;

    "getDefaultPartitions()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceControl(overrides?: Overrides): Promise<BigNumber>;

    "renounceControl()"(overrides?: Overrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setControllers(
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDefaultPartitions(bytes32[])"(
      partitions: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveByPartition(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveByPartition(bytes32,address,uint256)"(
      partition: BytesLike,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPartitionControllers(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPartitionControllers(bytes32,address[])"(
      partition: BytesLike,
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowanceByPartition(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowanceByPartition(bytes32,address,address)"(
      partition: BytesLike,
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isIssuable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isIssuable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMinter(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isControllable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isControllable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "granularity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalPartitions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPartitions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canOperatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canOperatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceIssuance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceIssuance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controllers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllersByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "controllersByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canTransferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canTransferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrate(address,bool)"(
      newContractAddress: string,
      definitive: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemFrom(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemFrom(address,uint256,bytes)"(
      from: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMinter(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceMinter(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceMinter()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupplyByPartition(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyByPartition(bytes32)"(
      partition: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenExtension(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenExtension(address,string,bool,bool,bool)"(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDefaultPartitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDefaultPartitions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceControl(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceControl()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setControllers(
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setControllers(address[])"(
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDefaultPartitions(
      partitions: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDefaultPartitions(bytes32[])"(
      partitions: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
