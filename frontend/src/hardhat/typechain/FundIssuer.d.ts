/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FundIssuerInterface extends ethers.utils.Interface {
  functions: {
    "priceOracles(address)": FunctionFragment;
    "setPriceOracles(address,address[])": FunctionFragment;
    "getCycleOrders(uint256)": FunctionFragment;
    "getNbCycles()": FunctionFragment;
    "getCycle(uint256)": FunctionFragment;
    "finalizeCycle(uint256)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "getInvestorOrders(address)": FunctionFragment;
    "getOrderAmountAndValue(uint256)": FunctionFragment;
    "getTotalSettledForCycle(uint256)": FunctionFragment;
    "batchExecutePaymentsAsController(uint256[],bool)": FunctionFragment;
    "getNbOrders()": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "getAssetValueRules(address,bytes32)": FunctionFragment;
    "tokenControllers(address)": FunctionFragment;
    "setAssetValueRules(address,bytes32,uint8,uint256,uint256)": FunctionFragment;
    "executePaymentAsInvestor(uint256)": FunctionFragment;
    "getLastCycleIndex(address,bytes32)": FunctionFragment;
    "executePaymentAsController(uint256,bool)": FunctionFragment;
    "getCycleState(uint256)": FunctionFragment;
    "batchSettleOrders(uint256[])": FunctionFragment;
    "rejectOrder(uint256,bool)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getAssetRules(address,bytes32)": FunctionFragment;
    "valuate(uint256,uint256,uint256)": FunctionFragment;
    "getCycleAssetValue(uint256)": FunctionFragment;
    "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)": FunctionFragment;
    "setTokenControllers(address,address[])": FunctionFragment;
    "subscribe(address,bytes32,uint256,uint256,uint8,bool)": FunctionFragment;
    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "priceOracles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracles",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbCycles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorOrders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderAmountAndValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSettledForCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecutePaymentsAsController",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetValueRules",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenControllers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetValueRules",
    values: [string, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executePaymentAsInvestor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCycleIndex",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executePaymentAsController",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSettleOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectOrder",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetRules",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valuate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleAssetValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetRules",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenControllers",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      BytesLike,
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceive",
    values: [
      BytesLike,
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "priceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderAmountAndValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSettledForCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExecutePaymentsAsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetValueRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetValueRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePaymentAsInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCycleIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePaymentAsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSettleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valuate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCycleAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canReceive", data: BytesLike): Result;

  events: {};
}

export class FundIssuer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FundIssuerInterface;

  functions: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCycleOrders(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getCycleOrders(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getNbCycles(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNbCycles()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCycle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: boolean;
    }>;

    "getCycle(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: boolean;
    }>;

    finalizeCycle(
      cycleIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getInvestorOrders(
      investor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getInvestorOrders(address)"(
      investor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getOrderAmountAndValue(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getOrderAmountAndValue(uint256)"(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getTotalSettledForCycle(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    "getTotalSettledForCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    batchExecutePaymentsAsController(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchExecutePaymentsAsController(uint256[],bool)"(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getNbOrders(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNbOrders()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelOrder(
      orderIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrder(uint256)"(
      orderIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getAssetValueRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    setAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetValueRules(address,bytes32,uint8,uint256,uint256)"(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executePaymentAsInvestor(
      orderIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "executePaymentAsInvestor(uint256)"(
      orderIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getLastCycleIndex(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getLastCycleIndex(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    executePaymentAsController(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executePaymentAsController(uint256,bool)"(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCycleState(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getCycleState(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    batchSettleOrders(
      orderIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchSettleOrders(uint256[])"(
      orderIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rejectOrder(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rejectOrder(uint256,bool)"(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrder(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    "getOrder(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    getAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: string;
      6: string;
      7: string;
      8: boolean;
    }>;

    "getAssetRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: string;
      6: string;
      7: string;
      8: boolean;
    }>;

    valuate(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "valuate(uint256,uint256,uint256)"(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCycleAssetValue(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getCycleAssetValue(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    setAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subscribe(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "subscribe(address,bytes32,uint256,uint256,uint8,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  priceOracles(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "priceOracles(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  setPriceOracles(
    tokenAddress: string,
    oracles: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceOracles(address,address[])"(
    tokenAddress: string,
    oracles: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCycleOrders(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getCycleOrders(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getNbCycles(overrides?: CallOverrides): Promise<BigNumber>;

  "getNbCycles()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCycle(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: string;
    8: string;
    9: boolean;
  }>;

  "getCycle(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: string;
    8: string;
    9: boolean;
  }>;

  finalizeCycle(
    cycleIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeCycle(uint256)"(
    cycleIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "canImplementInterfaceForAddress(bytes32,address)"(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getInvestorOrders(
    investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getInvestorOrders(address)"(
    investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOrderAmountAndValue(
    orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getOrderAmountAndValue(uint256)"(
    orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getTotalSettledForCycle(
    cycleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: boolean;
  }>;

  "getTotalSettledForCycle(uint256)"(
    cycleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: boolean;
  }>;

  batchExecutePaymentsAsController(
    orderIndexes: BigNumberish[],
    bypassPayment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchExecutePaymentsAsController(uint256[],bool)"(
    orderIndexes: BigNumberish[],
    bypassPayment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getNbOrders(overrides?: CallOverrides): Promise<BigNumber>;

  "getNbOrders()"(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrder(
    orderIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrder(uint256)"(
    orderIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAssetValueRules(
    assetAddress: string,
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getAssetValueRules(address,bytes32)"(
    assetAddress: string,
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  tokenControllers(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "tokenControllers(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  setAssetValueRules(
    assetAddress: string,
    assetClass: BytesLike,
    assetValueType: BigNumberish,
    assetValue: BigNumberish,
    reverseAssetValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetValueRules(address,bytes32,uint8,uint256,uint256)"(
    assetAddress: string,
    assetClass: BytesLike,
    assetValueType: BigNumberish,
    assetValue: BigNumberish,
    reverseAssetValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executePaymentAsInvestor(
    orderIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "executePaymentAsInvestor(uint256)"(
    orderIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getLastCycleIndex(
    assetAddress: string,
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastCycleIndex(address,bytes32)"(
    assetAddress: string,
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executePaymentAsController(
    orderIndex: BigNumberish,
    bypassPayment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executePaymentAsController(uint256,bool)"(
    orderIndex: BigNumberish,
    bypassPayment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCycleState(
    cycleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getCycleState(uint256)"(
    cycleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  batchSettleOrders(
    orderIndexes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchSettleOrders(uint256[])"(
    orderIndexes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rejectOrder(
    orderIndex: BigNumberish,
    rejected: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rejectOrder(uint256,bool)"(
    orderIndex: BigNumberish,
    rejected: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrder(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: number;
  }>;

  "getOrder(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: number;
  }>;

  getAssetRules(
    assetAddress: string,
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: string;
    6: string;
    7: string;
    8: boolean;
  }>;

  "getAssetRules(address,bytes32)"(
    assetAddress: string,
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: string;
    6: string;
    7: string;
    8: boolean;
  }>;

  valuate(
    cycleIndex: BigNumberish,
    assetValue: BigNumberish,
    reverseAssetValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "valuate(uint256,uint256,uint256)"(
    cycleIndex: BigNumberish,
    assetValue: BigNumberish,
    reverseAssetValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCycleAssetValue(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getCycleAssetValue(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: BigNumber;
    2: BigNumber;
  }>;

  setAssetRules(
    assetAddress: string,
    assetClass: BytesLike,
    firstStartTime: BigNumberish,
    subscriptionPeriodLength: BigNumberish,
    valuationPeriodLength: BigNumberish,
    paymentPeriodLength: BigNumberish,
    paymentType: BigNumberish,
    paymentAddress: string,
    paymentPartition: BytesLike,
    fundAddress: string,
    subscriptionsOpened: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)"(
    assetAddress: string,
    assetClass: BytesLike,
    firstStartTime: BigNumberish,
    subscriptionPeriodLength: BigNumberish,
    valuationPeriodLength: BigNumberish,
    paymentPeriodLength: BigNumberish,
    paymentType: BigNumberish,
    paymentAddress: string,
    paymentPartition: BytesLike,
    fundAddress: string,
    subscriptionsOpened: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenControllers(
    tokenAddress: string,
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenControllers(address,address[])"(
    tokenAddress: string,
    operators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subscribe(
    assetAddress: string,
    assetClass: BytesLike,
    orderValue: BigNumberish,
    orderAmount: BigNumberish,
    orderType: BigNumberish,
    executePaymentAtSubscription: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "subscribe(address,bytes32,uint256,uint256,uint8,bool)"(
    assetAddress: string,
    assetClass: BytesLike,
    orderValue: BigNumberish,
    orderAmount: BigNumberish,
    orderType: BigNumberish,
    executePaymentAtSubscription: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  tokensReceived(
    arg0: BytesLike,
    partition: BytesLike,
    arg2: string,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
    arg0: BytesLike,
    partition: BytesLike,
    arg2: string,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canReceive(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: string,
    arg4: string,
    arg5: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: string,
    arg4: string,
    arg5: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCycleOrders(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getCycleOrders(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNbCycles(overrides?: CallOverrides): Promise<BigNumber>;

    "getNbCycles()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCycle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: boolean;
    }>;

    "getCycle(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: boolean;
    }>;

    finalizeCycle(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getInvestorOrders(
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getInvestorOrders(address)"(
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOrderAmountAndValue(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getOrderAmountAndValue(uint256)"(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getTotalSettledForCycle(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    "getTotalSettledForCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    batchExecutePaymentsAsController(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "batchExecutePaymentsAsController(uint256[],bool)"(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNbOrders(overrides?: CallOverrides): Promise<BigNumber>;

    "getNbOrders()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(uint256)"(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getAssetValueRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    setAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetValueRules(address,bytes32,uint8,uint256,uint256)"(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executePaymentAsInvestor(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executePaymentAsInvestor(uint256)"(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLastCycleIndex(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastCycleIndex(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executePaymentAsController(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "executePaymentAsController(uint256,bool)"(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getCycleState(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getCycleState(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    batchSettleOrders(
      orderIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchSettleOrders(uint256[])"(
      orderIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rejectOrder(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectOrder(uint256,bool)"(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    "getOrder(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    getAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: string;
      6: string;
      7: string;
      8: boolean;
    }>;

    "getAssetRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: string;
      6: string;
      7: string;
      8: boolean;
    }>;

    valuate(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "valuate(uint256,uint256,uint256)"(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCycleAssetValue(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getCycleAssetValue(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    setAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscribe(address,bytes32,uint256,uint256,uint8,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCycleOrders(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCycleOrders(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbCycles(overrides?: CallOverrides): Promise<BigNumber>;

    "getNbCycles()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCycle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCycle(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeCycle(
      cycleIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestorOrders(
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInvestorOrders(address)"(
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderAmountAndValue(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderAmountAndValue(uint256)"(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSettledForCycle(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalSettledForCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchExecutePaymentsAsController(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchExecutePaymentsAsController(uint256[],bool)"(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getNbOrders(overrides?: CallOverrides): Promise<BigNumber>;

    "getNbOrders()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      orderIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrder(uint256)"(
      orderIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetValueRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetValueRules(address,bytes32,uint8,uint256,uint256)"(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executePaymentAsInvestor(
      orderIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "executePaymentAsInvestor(uint256)"(
      orderIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getLastCycleIndex(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastCycleIndex(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executePaymentAsController(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executePaymentAsController(uint256,bool)"(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCycleState(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCycleState(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSettleOrders(
      orderIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchSettleOrders(uint256[])"(
      orderIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    rejectOrder(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rejectOrder(uint256,bool)"(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrder(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrder(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuate(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "valuate(uint256,uint256,uint256)"(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCycleAssetValue(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCycleAssetValue(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    subscribe(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "subscribe(address,bytes32,uint256,uint256,uint8,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    priceOracles(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceOracles(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceOracles(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceOracles(address,address[])"(
      tokenAddress: string,
      oracles: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCycleOrders(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCycleOrders(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNbCycles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNbCycles()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCycle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCycle(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeCycle(
      cycleIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestorOrders(
      investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInvestorOrders(address)"(
      investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderAmountAndValue(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderAmountAndValue(uint256)"(
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSettledForCycle(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalSettledForCycle(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchExecutePaymentsAsController(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchExecutePaymentsAsController(uint256[],bool)"(
      orderIndexes: BigNumberish[],
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getNbOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNbOrders()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrder(
      orderIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder(uint256)"(
      orderIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetValueRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenControllers(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenControllers(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetValueRules(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetValueRules(address,bytes32,uint8,uint256,uint256)"(
      assetAddress: string,
      assetClass: BytesLike,
      assetValueType: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executePaymentAsInvestor(
      orderIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "executePaymentAsInvestor(uint256)"(
      orderIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getLastCycleIndex(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastCycleIndex(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executePaymentAsController(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executePaymentAsController(uint256,bool)"(
      orderIndex: BigNumberish,
      bypassPayment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCycleState(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCycleState(uint256)"(
      cycleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchSettleOrders(
      orderIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchSettleOrders(uint256[])"(
      orderIndexes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rejectOrder(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rejectOrder(uint256,bool)"(
      orderIndex: BigNumberish,
      rejected: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrder(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetRules(address,bytes32)"(
      assetAddress: string,
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valuate(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "valuate(uint256,uint256,uint256)"(
      cycleIndex: BigNumberish,
      assetValue: BigNumberish,
      reverseAssetValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCycleAssetValue(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCycleAssetValue(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetRules(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      firstStartTime: BigNumberish,
      subscriptionPeriodLength: BigNumberish,
      valuationPeriodLength: BigNumberish,
      paymentPeriodLength: BigNumberish,
      paymentType: BigNumberish,
      paymentAddress: string,
      paymentPartition: BytesLike,
      fundAddress: string,
      subscriptionsOpened: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenControllers(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenControllers(address,address[])"(
      tokenAddress: string,
      operators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "subscribe(address,bytes32,uint256,uint256,uint8,bool)"(
      assetAddress: string,
      assetClass: BytesLike,
      orderValue: BigNumberish,
      orderAmount: BigNumberish,
      orderType: BigNumberish,
      executePaymentAtSubscription: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      partition: BytesLike,
      arg2: string,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canReceive(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
