/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HoldableERC1400TokenExtensionInterface
  extends ethers.utils.Interface {
  functions: {
    "retrieveHoldData(address,bytes32)": FunctionFragment;
    "executeHold(address,bytes32,uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;

  events: {};
}

export class HoldableERC1400TokenExtension extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HoldableERC1400TokenExtensionInterface;

  functions: {
    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      partition: string;
      sender: string;
      recipient: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      secretHash: string;
      secret: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: number;
    }>;

    "retrieveHoldData(address,bytes32)"(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      partition: string;
      sender: string;
      recipient: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      secretHash: string;
      secret: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: number;
    }>;

    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeHold(address,bytes32,uint256,bytes32)"(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  retrieveHoldData(
    token: string,
    holdId: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    partition: string;
    sender: string;
    recipient: string;
    notary: string;
    value: BigNumber;
    expiration: BigNumber;
    secretHash: string;
    secret: string;
    status: number;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: number;
  }>;

  "retrieveHoldData(address,bytes32)"(
    token: string,
    holdId: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    partition: string;
    sender: string;
    recipient: string;
    notary: string;
    value: BigNumber;
    expiration: BigNumber;
    secretHash: string;
    secret: string;
    status: number;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: number;
  }>;

  executeHold(
    token: string,
    holdId: BytesLike,
    value: BigNumberish,
    lockPreimage: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeHold(address,bytes32,uint256,bytes32)"(
    token: string,
    holdId: BytesLike,
    value: BigNumberish,
    lockPreimage: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      partition: string;
      sender: string;
      recipient: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      secretHash: string;
      secret: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: number;
    }>;

    "retrieveHoldData(address,bytes32)"(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      partition: string;
      sender: string;
      recipient: string;
      notary: string;
      value: BigNumber;
      expiration: BigNumber;
      secretHash: string;
      secret: string;
      status: number;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: number;
    }>;

    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeHold(address,bytes32,uint256,bytes32)"(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveHoldData(address,bytes32)"(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeHold(address,bytes32,uint256,bytes32)"(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    retrieveHoldData(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retrieveHoldData(address,bytes32)"(
      token: string,
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeHold(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeHold(address,bytes32,uint256,bytes32)"(
      token: string,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
