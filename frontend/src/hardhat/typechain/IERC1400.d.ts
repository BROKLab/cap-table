/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IERC1400Interface extends ethers.utils.Interface {
  functions: {
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "transferWithData(address,uint256,bytes)": FunctionFragment;
    "isIssuable()": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "isControllable()": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "issueByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "redeemFrom(address,uint256,bytes)": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "getDocument(bytes32)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "issue(address,uint256,bytes)": FunctionFragment;
    "redeem(uint256,bytes)": FunctionFragment;
    "transferFromWithData(address,address,uint256,bytes)": FunctionFragment;
    "transferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [BytesLike, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;

  events: {
    "Document(bytes32,string,bytes32)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
    "ChangedPartition(bytes32,bytes32,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "Issued(address,address,uint256,bytes)": EventFragment;
    "Redeemed(address,address,uint256,bytes)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Document"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
}

export class IERC1400 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IERC1400Interface;

  functions: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isIssuable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isIssuable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isControllable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isControllable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemFrom(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  setDocument(
    name: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDocument(bytes32,string,bytes32)"(
    name: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorizeOperatorByPartition(bytes32,address)"(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeOperatorByPartition(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeOperatorByPartition(bytes32,address)"(
    partition: BytesLike,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferWithData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferWithData(address,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isIssuable(overrides?: CallOverrides): Promise<boolean>;

  "isIssuable()"(overrides?: CallOverrides): Promise<boolean>;

  balanceOfByPartition(
    partition: BytesLike,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfByPartition(bytes32,address)"(
    partition: BytesLike,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isControllable(overrides?: CallOverrides): Promise<boolean>;

  "isControllable()"(overrides?: CallOverrides): Promise<boolean>;

  redeemByPartition(
    partition: BytesLike,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemByPartition(bytes32,uint256,bytes)"(
    partition: BytesLike,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  issueByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issueByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isOperatorForPartition(
    partition: BytesLike,
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperatorForPartition(bytes32,address,address)"(
    partition: BytesLike,
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  partitionsOf(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "partitionsOf(address)"(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  operatorTransferByPartition(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
    partition: BytesLike,
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorizeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemFrom(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemFrom(address,uint256,bytes)"(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operatorRedeemByPartition(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    tokenHolder: string,
    value: BigNumberish,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDocument(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  "getDocument(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  isOperator(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperator(address,address)"(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issue(address,uint256,bytes)"(
    tokenHolder: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeem(
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256,bytes)"(
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFromWithData(
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFromWithData(address,address,uint256,bytes)"(
    from: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferByPartition(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferByPartition(bytes32,address,uint256,bytes)"(
    partition: BytesLike,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isIssuable(overrides?: CallOverrides): Promise<boolean>;

    "isIssuable()"(overrides?: CallOverrides): Promise<boolean>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<boolean>;

    "isControllable()"(overrides?: CallOverrides): Promise<boolean>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemFrom(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Document(
      name: BytesLike | null,
      uri: null,
      documentHash: null
    ): EventFilter;

    TransferByPartition(
      fromPartition: BytesLike | null,
      operator: null,
      from: string | null,
      to: string | null,
      value: null,
      data: null,
      operatorData: null
    ): EventFilter;

    ChangedPartition(
      fromPartition: BytesLike | null,
      toPartition: BytesLike | null,
      value: null
    ): EventFilter;

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    AuthorizedOperatorByPartition(
      partition: BytesLike | null,
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    RevokedOperatorByPartition(
      partition: BytesLike | null,
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Issued(
      operator: string | null,
      to: string | null,
      value: null,
      data: null
    ): EventFilter;

    Redeemed(
      operator: string | null,
      from: string | null,
      value: null,
      data: null
    ): EventFilter;

    IssuedByPartition(
      partition: BytesLike | null,
      operator: string | null,
      to: string | null,
      value: null,
      data: null,
      operatorData: null
    ): EventFilter;

    RedeemedByPartition(
      partition: BytesLike | null,
      operator: string | null,
      from: string | null,
      value: null,
      operatorData: null
    ): EventFilter;
  };

  estimateGas: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isIssuable(overrides?: CallOverrides): Promise<BigNumber>;

    "isIssuable()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<BigNumber>;

    "isControllable()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemFrom(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDocument(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorizeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeOperatorByPartition(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeOperatorByPartition(bytes32,address)"(
      partition: BytesLike,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferWithData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferWithData(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isIssuable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isIssuable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfByPartition(bytes32,address)"(
      partition: BytesLike,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isControllable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isControllable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemByPartition(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemByPartition(bytes32,uint256,bytes)"(
      partition: BytesLike,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    issueByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issueByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperatorForPartition(bytes32,address,address)"(
      partition: BytesLike,
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partitionsOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "partitionsOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorTransferByPartition(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition: BytesLike,
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemFrom(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemFrom(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operatorRedeemByPartition(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorRedeemByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      tokenHolder: string,
      value: BigNumberish,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issue(address,uint256,bytes)"(
      tokenHolder: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeem(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,bytes)"(
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFromWithData(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFromWithData(address,address,uint256,bytes)"(
      from: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferByPartition(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferByPartition(bytes32,address,uint256,bytes)"(
      partition: BytesLike,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
