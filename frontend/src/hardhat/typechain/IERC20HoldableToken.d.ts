/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IERC20HoldableTokenInterface extends ethers.utils.Interface {
  functions: {
    "executeHold(bytes32,bytes32)": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "releaseHold(bytes32)": FunctionFragment;
    "grossBalanceOf(address)": FunctionFragment;
    "hold(address,address,uint256,uint256,bytes32)": FunctionFragment;
    "holdStatus(bytes32)": FunctionFragment;
    "holdBalanceOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeHold",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseHold",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grossBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "holdStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "holdBalanceOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grossBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holdBalanceOf",
    data: BytesLike
  ): Result;

  events: {
    "NewHold(bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "ExecutedHold(bytes32,bytes32,address)": EventFragment;
    "ReleaseHold(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseHold"): EventFragment;
}

export class IERC20HoldableToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IERC20HoldableTokenInterface;

  functions: {
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupplyOnHold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyOnHold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    releaseHold(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "releaseHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grossBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "grossBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hold(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "hold(address,address,uint256,uint256,bytes32)"(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    holdStatus(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "holdStatus(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    holdBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "holdBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  "executeHold(bytes32,bytes32)"(
    holdId: BytesLike,
    lockPreimage: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeHold(bytes32,bytes32,address)"(
    holdId: BytesLike,
    lockPreimage: BytesLike,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeHold(bytes32)"(
    holdId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupplyOnHold()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  releaseHold(
    holdId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "releaseHold(bytes32)"(
    holdId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grossBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "grossBalanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hold(
    recipient: string,
    notary: string,
    amount: BigNumberish,
    expirationDateTime: BigNumberish,
    lockHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "hold(address,address,uint256,uint256,bytes32)"(
    recipient: string,
    notary: string,
    amount: BigNumberish,
    expirationDateTime: BigNumberish,
    lockHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  holdStatus(holdId: BytesLike, overrides?: CallOverrides): Promise<number>;

  "holdStatus(bytes32)"(
    holdId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  holdBalanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "holdBalanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupplyOnHold()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseHold(holdId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "releaseHold(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    grossBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "grossBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hold(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "hold(address,address,uint256,uint256,bytes32)"(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    holdStatus(holdId: BytesLike, overrides?: CallOverrides): Promise<number>;

    "holdStatus(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    holdBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "holdBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    NewHold(
      holdId: BytesLike | null,
      recipient: string | null,
      notary: string | null,
      amount: null,
      expirationDateTime: null,
      lockHash: null
    ): EventFilter;

    ExecutedHold(
      holdId: BytesLike | null,
      lockPreimage: null,
      recipient: null
    ): EventFilter;

    ReleaseHold(holdId: BytesLike | null, sender: null): EventFilter;
  };

  estimateGas: {
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupplyOnHold()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseHold(holdId: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "releaseHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grossBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "grossBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hold(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "hold(address,address,uint256,uint256,bytes32)"(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    holdStatus(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "holdStatus(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "holdBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "executeHold(bytes32,bytes32)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: BytesLike,
      lockPreimage: BytesLike,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupplyOnHold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseHold(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "releaseHold(bytes32)"(
      holdId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grossBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "grossBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hold(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "hold(address,address,uint256,uint256,bytes32)"(
      recipient: string,
      notary: string,
      amount: BigNumberish,
      expirationDateTime: BigNumberish,
      lockHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    holdStatus(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "holdStatus(bytes32)"(
      holdId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "holdBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
