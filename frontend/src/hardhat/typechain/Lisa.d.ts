/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LisaInterface extends ethers.utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "skinColor()": FunctionFragment;
    "is2D()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "skinColor", values?: undefined): string;
  encodeFunctionData(functionFragment: "is2D", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skinColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "is2D", data: BytesLike): Result;

  events: {};
}

export class Lisa extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LisaInterface;

  functions: {
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    skinColor(overrides?: Overrides): Promise<ContractTransaction>;

    "skinColor()"(overrides?: Overrides): Promise<ContractTransaction>;

    is2D(overrides?: Overrides): Promise<ContractTransaction>;

    "is2D()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  skinColor(overrides?: Overrides): Promise<ContractTransaction>;

  "skinColor()"(overrides?: Overrides): Promise<ContractTransaction>;

  is2D(overrides?: Overrides): Promise<ContractTransaction>;

  "is2D()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    skinColor(overrides?: CallOverrides): Promise<string>;

    "skinColor()"(overrides?: CallOverrides): Promise<string>;

    is2D(overrides?: CallOverrides): Promise<boolean>;

    "is2D()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    skinColor(overrides?: Overrides): Promise<BigNumber>;

    "skinColor()"(overrides?: Overrides): Promise<BigNumber>;

    is2D(overrides?: Overrides): Promise<BigNumber>;

    "is2D()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    skinColor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "skinColor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    is2D(overrides?: Overrides): Promise<PopulatedTransaction>;

    "is2D()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
