/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PauserMockInterface extends ethers.utils.Interface {
  functions: {
    "isPauser(address,address)": FunctionFragment;
    "renouncePauser(address)": FunctionFragment;
    "mockFunction(address,bool)": FunctionFragment;
    "addPauser(address,address)": FunctionFragment;
    "removePauser(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isPauser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunction",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addPauser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;

  events: {
    "PauserAdded(address,address)": EventFragment;
    "PauserRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
}

export class PauserMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PauserMockInterface;

  functions: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPauser(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    renouncePauser(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renouncePauser(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPauser(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPauser(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removePauser(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removePauser(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isPauser(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPauser(address,address)"(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renouncePauser(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renouncePauser(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockFunction(
    token: string,
    mockActivated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockFunction(address,bool)"(
    token: string,
    mockActivated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPauser(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPauser(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removePauser(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removePauser(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPauser(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renouncePauser(token: string, overrides?: CallOverrides): Promise<void>;

    "renouncePauser(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPauser(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removePauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removePauser(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PauserAdded(token: string | null, account: string | null): EventFilter;

    PauserRemoved(token: string | null, account: string | null): EventFilter;
  };

  estimateGas: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPauser(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renouncePauser(token: string, overrides?: Overrides): Promise<BigNumber>;

    "renouncePauser(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPauser(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPauser(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removePauser(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removePauser(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isPauser(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPauser(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renouncePauser(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockFunction(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockFunction(address,bool)"(
      token: string,
      mockActivated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPauser(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPauser(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removePauser(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removePauser(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
