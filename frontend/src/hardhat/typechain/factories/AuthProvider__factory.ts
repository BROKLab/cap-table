/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AuthProvider } from "../AuthProvider";

export class AuthProvider__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(operators: string[], overrides?: Overrides): Promise<AuthProvider> {
    return super.deploy(operators, overrides || {}) as Promise<AuthProvider>;
  }
  getDeployTransaction(
    operators: string[],
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(operators, overrides || {});
  }
  attach(address: string): AuthProvider {
    return super.attach(address) as AuthProvider;
  }
  connect(signer: Signer): AuthProvider__factory {
    return super.connect(signer) as AuthProvider__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AuthProvider {
    return new Contract(address, _abi, signerOrProvider) as AuthProvider;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "authenticate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "controllers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "hasAuthenticated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "isAuthenticated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
    ],
    name: "setControllers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "ttl",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261012c60015534801561001657600080fd5b506040516107b93803806107b98339818101604052602081101561003957600080fd5b810190808051604051939291908464010000000082111561005957600080fd5b90830190602082018581111561006e57600080fd5b825186602082028301116401000000008211171561008b57600080fd5b82525081516020918201928201910280838360005b838110156100b85781810151838201526020016100a0565b505050509050016040525050506100d4816100da60201b60201c565b50610221565b60005b60025481101561013657600060036000600284815481106100fa57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016100dd565b5060005b815181101561018f5760016003600084848151811061015557fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161013a565b5080516101a39060029060208401906101a7565b5050565b8280548282559060005260206000209081019282156101fc579160200282015b828111156101fc57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906101c7565b5061020892915061020c565b5090565b5b80821115610208576000815560010161020d565b610589806102306000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806308e0d29d14610067578063418d7ed91461008f5780637cc0c3a7146100c7578063b508c8721461011f578063d15d41501461015f578063ea74838a14610185575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b03166101f3565b005b6100b5600480360360208110156100a557600080fd5b50356001600160a01b0316610272565b60408051918252519081900360200190f35b6100cf61028d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561010b5781810151838201526020016100f3565b505050509050019250505060405180910390f35b61014b6004803603604081101561013557600080fd5b506001600160a01b0381351690602001356102ef565b604080519115158252519081900360200190f35b61014b6004803603602081101561017557600080fd5b50356001600160a01b031661034c565b61008d6004803603602081101561019b57600080fd5b810190602081018135600160201b8111156101b557600080fd5b8201836020820111156101c757600080fd5b803590602001918460208302840111600160201b831117156101e857600080fd5b509092509050610358565b3360009081526003602052604090205460ff16610256576040805162461bcd60e51b815260206004820152601c60248201527b36b9b39739b2b73232b91034b9903737ba1031b7b73a3937b63632b960211b604482015290519081900360640190fd5b6001600160a01b03166000908152602081905260409020429055565b6001600160a01b031660009081526020819052604090205490565b606060028054806020026020016040519081016040528092919081815260200182805480156102e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c7575b5050505050905090565b6001600160a01b03821660009081526020819052604081205480610317576000915050610346565b6001600160a01b0384166000908152602081905260409020548310610340576001915050610346565b60009150505b92915050565b600061034682426102ef565b3360009081526003602052604090205460ff166103bb576040805162461bcd60e51b815260206004820152601c60248201527b36b9b39739b2b73232b91034b9903737ba1031b7b73a3937b63632b960211b604482015290519081900360640190fd5b6103f78282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506103fb92505050565b5050565b60005b600254811015610457576000600360006002848154811061041b57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016103fe565b5060005b81518110156104b05760016003600084848151811061047657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161045b565b5080516002805482825560008290526103f7927f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9182019160208601821561052e579160200282015b8281111561052e57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906104f9565b5061053a92915061053e565b5090565b5b8082111561053a576000815560010161053f56fea26469706673582212205d561a420f8890a66d8afe7c6a72606f45d7d9d234980cdadd28145844e61aa864736f6c63430007030033";
