/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ERC1400AuthValidator } from "../ERC1400AuthValidator";

export class ERC1400AuthValidator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    authProviderAddress: string,
    overrides?: Overrides
  ): Promise<ERC1400AuthValidator> {
    return super.deploy(
      authProviderAddress,
      overrides || {}
    ) as Promise<ERC1400AuthValidator>;
  }
  getDeployTransaction(
    authProviderAddress: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(authProviderAddress, overrides || {});
  }
  attach(address: string): ERC1400AuthValidator {
    return super.attach(address) as ERC1400AuthValidator;
  }
  connect(signer: Signer): ERC1400AuthValidator__factory {
    return super.connect(signer) as ERC1400AuthValidator__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1400AuthValidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1400AuthValidator;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        name: "",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "payload",
        type: "bytes",
      },
      {
        name: "partition",
        type: "bytes32",
      },
      {
        name: "operator",
        type: "address",
      },
      {
        name: "from",
        type: "address",
      },
      {
        name: "to",
        type: "address",
      },
      {
        name: "value",
        type: "uint256",
      },
      {
        name: "data",
        type: "bytes",
      },
      {
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "tokensToValidate",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "token",
        type: "address",
      },
      {
        name: "payload",
        type: "bytes",
      },
      {
        name: "partition",
        type: "bytes32",
      },
      {
        name: "operator",
        type: "address",
      },
      {
        name: "from",
        type: "address",
      },
      {
        name: "to",
        type: "address",
      },
      {
        name: "value",
        type: "uint256",
      },
      {
        name: "data",
        type: "bytes",
      },
      {
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "canValidate",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "authProviderAddress",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516020806108e28339810180604052602081101561003057600080fd5b505160408051808201909152601681527f45524331343030546f6b656e7356616c696461746f7200000000000000000000602082015261007c906401000000006106586100eb82021704565b60408051808201909152601481527f455243313430304175746856616c696461746f7200000000000000000000000060208201526100c6906401000000006106586100eb82021704565b60018054600160a060020a031916600160a060020a0392909216919091179055610186565b6001600080836040516020018082805190602001908083835b602083106101235780518252601f199092019160209182019101610104565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61074d806101956000396000f3fe608060405234801561001057600080fd5b50600436106100445760e060020a6000350463249cb3fa8114610049578063520faa761461008757806390819ca0146101ca575b600080fd5b6100756004803603604081101561005f57600080fd5b5080359060200135600160a060020a031661032f565b60408051918252519081900360200190f35b6101c8600480360361010081101561009e57600080fd5b8101906020810181356401000000008111156100b957600080fd5b8201836020820111156100cb57600080fd5b803590602001918460018302840111640100000000831117156100ed57600080fd5b91939092823592600160a060020a03602082013581169360408301358216936060840135909216926080810135929060c081019060a0013564010000000081111561013757600080fd5b82018360208201111561014957600080fd5b8035906020019184600183028401116401000000008311171561016b57600080fd5b91939092909160208101903564010000000081111561018957600080fd5b82018360208201111561019b57600080fd5b803590602001918460018302840111640100000000831117156101bd57600080fd5b50909250905061039e565b005b61031b60048036036101208110156101e157600080fd5b600160a060020a03823516919081019060408101602082013564010000000081111561020c57600080fd5b82018360208201111561021e57600080fd5b8035906020019184600183028401116401000000008311171561024057600080fd5b91939092823592600160a060020a03602082013581169360408301358216936060840135909216926080810135929060c081019060a0013564010000000081111561028a57600080fd5b82018360208201111561029c57600080fd5b803590602001918460018302840111640100000000831117156102be57600080fd5b9193909290916020810190356401000000008111156102dc57600080fd5b8201836020820111156102ee57600080fd5b8035906020019184600183028401116401000000008311171561031057600080fd5b50909250905061049a565b604080519115158252519081900360200190f35b60008281526020819052604081205460ff16156103945760405160200180807f455243313832305f4143434550545f4d414749430000000000000000000000008152506014019050604051602081830303815290604052805190602001209050610398565b5060005b92915050565b61044f338c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981528f93508e92508d918d918d918d908d908190840183828082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201919091525061057c92505050565b151561048d576040805160e560020a62461bcd028152602060048201526002602482015260f060020a61413702604482015290519081900360640190fd5b5050505050505050505050565b600061056b8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8c8c8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061057c92505050565b9d9c50505050505050505050505050565b6001546040805160e160020a635a846439028152600160a060020a0387811660048301526301e1337f194201602483015291516000938493169163b508c872916044808301926020929190829003018186803b1580156105db57600080fd5b505afa1580156105ef573d6000803e3d6000fd5b505050506040513d602081101561060557600080fd5b5051905080151561064a5760405160e560020a62461bcd02815260040180806020018281038252602e8152602001806106f4602e913960400191505060405180910390fd5b9a9950505050505050505050565b6001600080836040516020018082805190602001908083835b602083106106905780518252601f199092019160209182019101610671565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055505056fe544f2061646472657373204e4f542061757468656e7469636174656420696e206c6173742033363520646179732ea165627a7a72305820f45dcf09aec21fb62fb8665501000e5be8ac5c239db5131740f870239d3f430b0029";
