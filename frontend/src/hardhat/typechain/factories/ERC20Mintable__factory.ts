/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ERC20Mintable } from "../ERC20Mintable";

export class ERC20Mintable__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ERC20Mintable> {
    return super.deploy(overrides || {}) as Promise<ERC20Mintable>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20Mintable {
    return super.attach(address) as ERC20Mintable;
  }
  connect(signer: Signer): ERC20Mintable__factory {
    return super.connect(signer) as ERC20Mintable__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mintable {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mintable;
  }
}

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "spender",
        type: "address",
      },
      {
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "from",
        type: "address",
      },
      {
        name: "to",
        type: "address",
      },
      {
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "spender",
        type: "address",
      },
      {
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "to",
        type: "address",
      },
      {
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "account",
        type: "address",
      },
    ],
    name: "addMinter",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "renounceMinter",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "spender",
        type: "address",
      },
      {
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "to",
        type: "address",
      },
      {
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "account",
        type: "address",
      },
    ],
    name: "isMinter",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "owner",
        type: "address",
      },
      {
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "account",
        type: "address",
      },
    ],
    name: "MinterAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "account",
        type: "address",
      },
    ],
    name: "MinterRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
];

const _bytecode =
  "0x60806040526100163364010000000061001b810204565b6100f8565b6100336003826401000000006107d461006a82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a038116151561007f57600080fd5b61009282826401000000006100c1810204565b1561009c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156100d857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6108ba806101076000396000f3fe608060405234801561001057600080fd5b50600436106100a75760e060020a6000350463095ea7b381146100ac57806318160ddd146100ec57806323b872dd14610106578063395093511461013c57806340c10f191461016857806370a0823114610194578063983b2d56146101ba57806398650275146101e2578063a457c2d7146101ea578063a9059cbb14610216578063aa271e1a14610242578063dd62ed3e14610268575b600080fd5b6100d8600480360360408110156100c257600080fd5b50600160a060020a038135169060200135610296565b604080519115158252519081900360200190f35b6100f4610302565b60408051918252519081900360200190f35b6100d86004803603606081101561011c57600080fd5b50600160a060020a03813581169160208101359091169060400135610308565b6100d86004803603604081101561015257600080fd5b50600160a060020a0381351690602001356103bf565b6100d86004803603604081101561017e57600080fd5b50600160a060020a03813516906020013561045d565b6100f4600480360360208110156101aa57600080fd5b5035600160a060020a0316610486565b6101e0600480360360208110156101d057600080fd5b5035600160a060020a03166104a1565b005b6101e06104c1565b6100d86004803603604081101561020057600080fd5b50600160a060020a0381351690602001356104cc565b6100d86004803603604081101561022c57600080fd5b50600160a060020a038135169060200135610517565b6100d86004803603602081101561025857600080fd5b5035600160a060020a0316610524565b6100f46004803603604081101561027e57600080fd5b50600160a060020a038135811691602001351661053d565b6000600160a060020a03831615156102ad57600080fd5b336000818152600160209081526040808320600160a060020a038816808552908352928190208690558051868152905192939260008051602061086f833981519152929181900390910190a350600192915050565b60025490565b600160a060020a038316600090815260016020908152604080832033845290915281205461033c908363ffffffff61056816565b600160a060020a038516600090815260016020908152604080832033845290915290205561036b84848461057d565b600160a060020a03841660008181526001602090815260408083203380855290835292819020548151908152905192939260008051602061086f833981519152929181900390910190a35060019392505050565b6000600160a060020a03831615156103d657600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461040a908363ffffffff61064a16565b336000818152600160209081526040808320600160a060020a03891680855290835292819020859055805194855251919360008051602061086f833981519152929081900390910190a350600192915050565b600061046833610524565b151561047357600080fd5b61047d8383610663565b50600192915050565b600160a060020a031660009081526020819052604090205490565b6104aa33610524565b15156104b557600080fd5b6104be8161070d565b50565b6104ca33610755565b565b6000600160a060020a03831615156104e357600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461040a908363ffffffff61056816565b600061047d33848461057d565b600061053760038363ffffffff61079d16565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561057757600080fd5b50900390565b600160a060020a038216151561059257600080fd5b600160a060020a0383166000908152602081905260409020546105bb908263ffffffff61056816565b600160a060020a0380851660009081526020819052604080822093909355908416815220546105f0908263ffffffff61064a16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561065c57600080fd5b9392505050565b600160a060020a038216151561067857600080fd5b60025461068b908263ffffffff61064a16565b600255600160a060020a0382166000908152602081905260409020546106b7908263ffffffff61064a16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b61071e60038263ffffffff6107d416565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61076660038263ffffffff61082216565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a03821615156107b457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a03811615156107e957600080fd5b6107f3828261079d565b156107fd57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116151561083757600080fd5b610841828261079d565b151561084c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820bcd7679cb048951e5bea16c386050705d12ec0a5ce1145f3e582410c91d3bca60029";
