/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ExampleClient } from "../ExampleClient";

export class ExampleClient__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ExampleClient> {
    return super.deploy(overrides || {}) as Promise<ExampleClient>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExampleClient {
    return super.attach(address) as ExampleClient;
  }
  connect(signer: Signer): ExampleClient__factory {
    return super.connect(signer) as ExampleClient__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExampleClient {
    return new Contract(address, _abi, signerOrProvider) as ExampleClient;
  }
}

const _abi = [
  {
    constant: false,
    inputs: [],
    name: "delegateManager",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060408051808201909152600d81527f4578616d706c65436c69656e74000000000000000000000000000000000000006020820152610058903064010000000061006f810204565b60008054600160a060020a0319163317905561017b565b6000826040516020018082805190602001908083835b602083106100a45780518252601f199092019160209182019101610085565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352808552825192909101919091207f29965a1d00000000000000000000000000000000000000000000000000000000825230600483015260248201819052600160a060020a03881660448301529251929550731820a4b7618bde71dce8cdc73aab6c95905fad2494506329965a1d9350606480820193600093509182900301818387803b15801561015e57600080fd5b505af1158015610172573d6000803e3d6000fd5b50505050505050565b6101558061018a6000396000f3fe608060405234801561001057600080fd5b506004361061002e5760e060020a6000350463388e91048114610033575b600080fd5b61003b61003d565b005b600054600160a060020a0316331461009f576040805160e560020a62461bcd02815260206004820152600d60248201527f4e6f7420746865206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b6100a8336100aa565b565b6040805160e060020a635df8122f028152306004820152600160a060020a03831660248201529051731820a4b7618bde71dce8cdc73aab6c95905fad2491635df8122f91604480830192600092919082900301818387803b15801561010e57600080fd5b505af1158015610122573d6000803e3d6000fd5b505050505056fea165627a7a7230582084c3401491cb5a8049c52ec20c930b84a1bae98f930c5e50f8af8d40da4217690029";
